//-----------------------------------------------------------------------
// <copyright file="ConfirmationCodeFactory.cs" company="Company">
// Copyright (c) Company. All rights reserved.
// </copyright>
// <author>Nathan VanHouten</author>
//-----------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/// <summary>
/// Factory for confirmation codes.
/// Currently class is mostly static. Should extend to singleton class generated on configuration by a singleton factory.
/// </summary>
public class ConfirmationCodeFactory
{
    /// <summary>
    /// The length of the confirmation code
    /// </summary>
    private static readonly int Length = 8;

    /// <summary>
    /// The characters used in the confirmation code
    /// </summary>
    private static readonly string Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    /// <summary>
    /// The maximum amount of possible confirmation codes
    /// </summary>
    private static readonly int MaximumCodes = Chars.Length * Length;

    /// <summary>
    /// A list of codes generated by the factory
    /// </summary>
    private static List<string> generatedCodes = new List<string>();

    /// <summary>
    /// Random value generator
    /// </summary>
    private static Random random = new Random();

    /// <summary>
    /// Generates a random unique confirmation code.
    /// </summary>
    /// <returns>The confirmation code</returns>
    public static string Generate()
    {
        if (generatedCodes.Count >= MaximumCodes)
        {
            throw new Exception("Too many confirmation codes generated! Expand character set or length!");
        }

        string code = null;
        do
        {
            code = new string(Enumerable.Repeat(Chars, Length).Select(s => s[random.Next(s.Length)]).ToArray());
        }
        while (generatedCodes.Contains(code));

        generatedCodes.Add(code);

        return code;
    }
}